# Things aren't as nice in here as we'd like, but that's because
# we need to preserve how things build in the autoconf and windows
# builds for watchman.

compiler_flags = [
    "-Wunused-variable",
    "-DWATCHMAN_FACEBOOK_INTERNAL",
]

os_linker_flags = [
    (
        "macos",
        [
            "-framework",
            "CoreServices",
        ],
    ),
]

# Just copy the pre-configured linux attributes so that we have
# know precisely what the characteristics will be for this build.
buck_genrule(
    name = "generate_config_h",
    srcs = ["facebook/linux_config.h"],
    out = "config.h",
    cmd = "cp $SRCDIR/facebook/linux_config.h $OUT",
)

# Wraps the generated config.h file in a library rule that we can
# depend upon.
buck_cxx_library(
    name = "config_h",
    header_namespace = "",
    exported_headers = [
        ":generate_config_h",
    ],
    visibility = ["PUBLIC"],
)

# Exports all watchman headers without the 'watchman/' prefix that
# they would otherwise have in our build tree.
buck_cxx_library(
    name = "headers",
    header_namespace = "",
    exported_headers = glob(["**/*.h"]),
    visibility = ["PUBLIC"],
    exported_deps = [
        ":config_h",
        "//common/base:build_info",
        "//folly:dynamic",
        "//folly:exception_wrapper",
        "//folly:executor",
        "//folly:optional",
        "//folly/io:iobuf",
        "//watchman/thirdparty/jansson:config_h",
    ],
)

def sysdep_watcher():
    if host_info().os.is_linux:
        cpp_library(
            name = "eden_watcher",
            srcs = [
                "cmds/heapprof.cpp",
                "watcher/eden.cpp",
            ],
            compiler_flags = compiler_flags + ["-DUSE_JEMALLOC"],
            # We use constructors to declare commands rather than maintaining
            # static tables of things.  Ensure that they don't get stripped
            # out of the final binary!
            link_whole = True,
            undefined_symbols = True,  # TODO(T23121628): fix deps and remove
            deps = [
                ":err",
                ":headers",
                "//eden/fs/service:thrift-streaming-cpp2",
                "//folly:string",
                "//watchman/thirdparty/wildmatch:wildmatch",
            ],
        )

        # Linux specific watcher module
        cpp_library(
            name = "sysdep_watcher",
            srcs = ["watcher/inotify.cpp"],
            compiler_flags = compiler_flags,
            # We use constructors to declare commands rather than maintaining
            # static tables of things.  Ensure that they don't get stripped
            # out of the final binary!
            link_whole = True,
            undefined_symbols = True,  # TODO(T23121628): fix deps and remove
            deps = [
                ":eden_watcher",
                ":err",
                ":headers",
            ],
        )
    elif host_info().os.is_mac:
        # mac specific watcher module
        cpp_library(
            name = "sysdep_watcher",
            srcs = [
                "watcher/fsevents.cpp",
                "watcher/kqueue.cpp",
            ],
            compiler_flags = compiler_flags,
            # We use constructors to declare commands rather than maintaining
            # static tables of things.  Ensure that they don't get stripped
            # out of the final binary!
            link_whole = True,
            deps = [":headers"],
        )
    elif host_info().os.is_windows:
        # windows specific watcher module
        cpp_library(
            name = "sysdep_watcher",
            srcs = ["watcher/win32.cpp"],
            compiler_flags = compiler_flags,
            # We use constructors to declare commands rather than maintaining
            # static tables of things.  Ensure that they don't get stripped
            # out of the final binary!
            link_whole = True,
            deps = [":headers"],
        )

sysdep_watcher()

cpp_library(
    name = "log",
    srcs = [
        "PubSub.cpp",
        "log.cpp",
    ],
    compiler_flags = compiler_flags,
    undefined_symbols = True,  # TODO(T23121628): fix deps and remove
    deps = [
        ":headers",
        "//watchman/thirdparty/jansson:jansson",
    ],
)

cpp_library(
    name = "hash",
    srcs = ["hash.cpp"],
    compiler_flags = compiler_flags,
    deps = [":headers"],
)

cpp_library(
    name = "string",
    srcs = ["string.cpp"],
    compiler_flags = compiler_flags,
    deps = [
        ":hash",
        ":headers",
        "//watchman/thirdparty/jansson:utf",
    ],
)

cpp_library(
    name = "err",
    srcs = [
        "root/poison.cpp",
        "root/warnerr.cpp",
    ],
    compiler_flags = compiler_flags,
    undefined_symbols = True,  # TODO(T23121628): fix deps and remove
    deps = [":headers"],
)

cpp_library(
    name = "pcre",
    srcs = ["query/pcre.cpp"],
    compiler_flags = ["-DHAVE_PCRE_H"] + compiler_flags,
    link_whole = True,
    undefined_symbols = True,  # TODO(T23121628): fix deps and remove
    deps = [":headers"],
    external_deps = ["pcre"],
)

cpp_library(
    name = "testsupport",
    srcs = [
        "ChildProcess.cpp",
        "FileDescriptor.cpp",
        "FileInformation.cpp",
        "Pipe.cpp",
        "ThreadPool.cpp",
        "bser.cpp",
        "cfg.cpp",
        "expflags.cpp",
        "ignore.cpp",
        "opendir.cpp",
        "pending.cpp",
        "time.cpp",
    ],
    compiler_flags = compiler_flags,
    deps = [
        ":headers",
        ":log",
        ":string",
        "//watchman/thirdparty/jansson:jansson",
        "//watchman/thirdparty/libart/src:art",
    ],
)

cpp_library(
    name = "manifold_saved_state_deps",
    srcs = [],
    compiler_flags = compiler_flags,
    deps = [
        "//common/db/mysql_client:mysql_client",
    ],
)

# The bulk of the watchman implementation lives in this library
cpp_library(
    name = "watchmanlib",
    srcs = glob(
        [
            "*.cpp",
            "query/*.cpp",
            "watcher/auto.cpp",
            "root/*.cpp",
            "cmds/*.cpp",
            "scm/*.cpp",
            "saved_state/*.cpp",
            "facebook/saved_state/*.cpp",
        ],
        excludes = [
            "main.cpp",
            "stream_win.cpp",
            "log.cpp",
            "query/pcre.cpp",
            "root/warnerr.cpp",
            "root/poison.cpp",
            "cmds/heapprof.cpp",
        ],
    ),
    compiler_flags = compiler_flags,
    # We use constructors to declare commands rather than maintaining
    # static tables of things.  Ensure that they don't get stripped
    # out of the final binary!
    link_whole = True,
    os_linker_flags = os_linker_flags,
    undefined_symbols = True,  # TODO(T23121628): fix deps and remove
    deps = [
        ":err",
        ":headers",
        ":log",
        ":manifold_saved_state_deps",
        ":pcre",
        ":string",
        ":sysdep_watcher",
        "//watchman/thirdparty/jansson:jansson",
        "//watchman/thirdparty/libart/src:art",
        "//watchman/thirdparty/wildmatch:wildmatch",
    ],
)

# and the watchman binary itself
cpp_binary(
    name = "watchman",
    srcs = ["main.cpp"],
    compiler_flags = compiler_flags,
    deps = [
        ":headers",
        ":watchmanlib",
    ],
)

# This is the custom test runner used by the open source build.
python_library(
    name = "runtests",
    srcs = ["runtests.py"],
    py_version = "<3",
    runtime_deps = [
        ":watchman",
    ],
    deps = [
        "//watchman/tests/integration:testlib",
    ],
)

python_library(
    name = "runtests-py3",
    srcs = ["runtests.py"],
    py_version = ">=3.5",
    runtime_deps = [
        ":watchman",
    ],
    deps = [
        "//watchman/tests/integration:testlib-py3",
    ],
)
